# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeoDistrictDockWidget
                                 A QGIS plugin
 GeoDistrict
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-12-07
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Jose
        email                : joseabula@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import csv
import processing

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal

from qgis.core import QgsProject, QgsVectorLayer, QgsField, QgsFeature, QgsGeometry, QgsPointXY, QgsDataProvider
from PyQt5.QtCore import QVariant
from qgis.gui import QgsFileWidget

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'GeoDistrict_dockwidget_base.ui'))


class GeoDistrictDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()
    

    def __init__(self, parent=None):
        """Constructor."""
        super(GeoDistrictDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.btn_actualizar.clicked.connect(self.actualizar)
        self.btn_generar.clicked.connect(self.generar)
        self.btn_crear.clicked.connect(self.crear)
        self.btn_radios.clicked.connect(self.buscar)
        self.cmb_radios.currentIndexChanged.connect(self.seleccionar)
        self.qfw_selector.setFilter("Archivos csv(*.csv)")
        self.qfw_selector.setStorageMode(QgsFileWidget.SaveFile)
        
        global layer_list
        layers = QgsProject.instance().mapLayers().values()
        layer_list = []
        layer_list = [layer.name() for layer in layers]
        self.cmb_Capa.clear()
        self.cmb_Capa.addItems(layer_list)
        
        self.cmb_Capa2.clear()
        self.cmb_Capa2.addItems(layer_list)
        
        self.cmb_Capa3.clear()
        self.cmb_Capa3.addItems(layer_list)
        

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
        
    def seleccionar(self):
        self.txt_radio.setText(self.cmb_radios.currentText())

    def actualizar(self):
        global layer_list
        layers = QgsProject.instance().mapLayers().values()
        layer_list = []
        layer_list = [layer.name() for layer in layers]
        self.cmb_Capa.clear()
        self.cmb_Capa.addItems(layer_list)
        
        self.cmb_Capa2.clear()
        self.cmb_Capa2.addItems(layer_list)
        
        self.cmb_Capa3.clear()
        self.cmb_Capa3.addItems(layer_list)
        

    def buscar(self):
        seleccionado_1 = self.cmb_Capa.currentIndex()
        seleccioncapa1 = layer_list[seleccionado_1]
        capas6 = QgsProject.instance().mapLayersByName(seleccioncapa1)
        capa6 = capas6[0]
        valoresunicos = [];
        uniqueprovider = capa6.dataProvider()
        campos_radio = uniqueprovider.fields()
        identificador = campos_radio.indexFromName('RADIO')
        valoresunicos= uniqueprovider.uniqueValues( identificador )
        self.cmb_radios.clear()
        for valor_unico in valoresunicos:
            self.cmb_radios.addItem(str(valor_unico))
        self.txt_radio.setText(self.cmb_radios.currentText())

    def generar(self):
        #capas6 = QgsProject.instance().mapLayersByName("Avila_6CT")
        #capas6 = QgsProject.instance().mapLayersByName("Radio_1050")
        #capa6 = capas6[0]
        #capas7 = QgsProject.instance().mapLayersByName("Avila_7CT")
        #capa7 = capas7[0]
        global radio
        radio=float(self.txt_radio.text())
        #comboBox 1
        seleccionado_1 = self.cmb_Capa.currentIndex()
        seleccioncapa1 = layer_list[seleccionado_1]
        capas6 = QgsProject.instance().mapLayersByName(seleccioncapa1)
        capa6 = capas6[0]

        # comboBox 2
        seleccionado_2 = self.cmb_Capa3.currentIndex()
        seleccioncapa2 = layer_list[seleccionado_2]
        capas7 = QgsProject.instance().mapLayersByName(seleccioncapa2)
        capa7 = capas7[0]
        
        
        lista = list()
        lista2=list()
        
        
        factor=1
        encontrado=0
        registros = capa6.getFeatures()
        for registro in registros:
            if registro["radio"]==radio:
                geom6 = registro.geometry()
                registros2 = capa7.getFeatures()
                for registro2 in registros2:
                    if registro2["fecha_3CT"]==1:
                        geom7 = registro2.geometry()
                        distancia = geom6.distance(geom7)
                        #escribir_csv.write(str(registro["FID_Avila_"])+"--"+str(distancia)+"==>"+str(registro["RADIO"])+"\n")
                        if distancia <= registro["RADIO"]*factor:
                            fila=list()#fila= str(registro["OBJECTID"])+";"+str(registro["RADIO"]*factor)+";"+str(registro2["OBJECTID"])+";"
                            fila.append(registro["OBJECTID"])#fila=fila+str(distancia)+";"+str(registro2["Avila_3_14"])
                            fila.append(registro["RADIO"]*factor)
                            fila.append(registro2["OBJECTID"])
                            fila.append(str(distancia))
                            #fila.append(str(registro2["Avila_3_14"]))
                            lista.append(fila)
                            encontrado=0
                            for valor in lista2:
                                if valor[1]==registro["OBJECTID"]:
                                    valor[0]=valor[0]+1
                                    encontrado=1
                            if encontrado==0:
                                fila2=list()
                                fila2.append(1)
                                fila2.append(registro["OBJECTID"])
                                lista2.append(fila2)
                        #else:
                        #    fila= str(registro["OBJECTID"])+";"+str(registro["RADIO"]*factor)+";"+str(registro2["OBJECTID"])+";"
                        #    fila=fila+str(distancia)+";"+str(registro2["Avila_3_14"])
                        #    escribir_csv.write(fila+"\n")                    
        encabezado= "OBJECTID_6;RADIO;OBJECTID_7;DISTANCIA;SUPERFICIE"
        #ruta = "c:/Qt/distrito_radio_variable2.csv"
        ruta=str(self.qfw_selector.filePath())
        
        escribir_csv=open(ruta, 'w')
        escribir_csv.write("OBJECTID;RADIO;REPETICIONES\n")
        lista2.sort(reverse=True)
        self.qtw_tabla.clearContents()
        self.qtw_tabla.setRowCount(0)
        for valor2 in lista2:
            self.qtw_tabla.insertRow(self.qtw_tabla.rowCount())
            self.qtw_tabla.setItem(self.qtw_tabla.rowCount() -1, 0, QtWidgets.QTableWidgetItem(str(valor2[1])))
            self.qtw_tabla.setItem(self.qtw_tabla.rowCount() -1, 1, QtWidgets.QTableWidgetItem(str(radio)))
            self.qtw_tabla.setItem(self.qtw_tabla.rowCount() -1, 2, QtWidgets.QTableWidgetItem(str(valor2[0])))
            escribir_csv.write(str(valor2[1])+";"+str(radio)+";"+str(valor2[0])+"\n")
        escribir_csv.close()
        
    def crear(self):
        global radio
        #numero=int(self.txt_numero.text())
        fila = self.qtw_tabla.currentRow()
        if fila==-1:
            fila=0
        edificio=self.qtw_tabla.item(fila,0).text()
        
        vlayer = QgsVectorLayer('Point?crs=EPSG:25830', 'Edificio candidato:  '+str(edificio), 'memory')
        provider = vlayer.dataProvider()
        provider.addAttributes([QgsField('ObjectID', QVariant.String),
                                QgsField('repeticiones', QVariant.String)])
        vlayer.updateFields()
        #tope=numero
        #if self.qtw_tabla.rowCount()<numero:
        #    tope=self.qtw_tabla.rowCount()-1
        #for fila in range (0,tope):
        seleccionado_5 = self.cmb_Capa2.currentIndex()
        seleccioncapa5 = layer_list[seleccionado_5]
        capas5 = QgsProject.instance().mapLayersByName(seleccioncapa5)
        capa5 = capas5[0]
        vlayer.setCrs(capa5.crs())
        seleccionado_1 = self.cmb_Capa.currentIndex()
        seleccioncapa1 = layer_list[seleccionado_1]
        capas6 = QgsProject.instance().mapLayersByName(seleccioncapa1)
        capa6 = capas6[0]
        if capa6 != None:
            capa6.selectByExpression("\"objectid\"=" + str(edificio))
            if capa6.selectedFeatureCount() > 0:
                entidades = capa6.selectedFeatures()
                entidad=entidades[0]
                f = QgsFeature()
                f.setGeometry(entidad.geometry())
                f.setAttributes([self.qtw_tabla.item(fila,0).text(),self.qtw_tabla.item(fila,2).text()])
                provider.addFeature(f)
                vlayer.updateExtents()
                QgsProject.instance().addMapLayer(vlayer)
                #Crear buffer del tama√±o del radio
                geom = f.geometry()
 
                #determinar buffer radio m
                buffer = geom.buffer(radio,-1)
                vlayer2 = QgsVectorLayer('Polygon?crs=EPSG:25830', 'Zona alrededor:  '+str(edificio), 'memory')
                vlayer2.setOpacity(0.5)
                provider2 = vlayer2.dataProvider()
                provider2.addAttributes([QgsField('ObjectID', QVariant.String), QgsField('repeticiones', QVariant.String)])
                vlayer2.updateFields()
                entidad_zona = QgsFeature()
                entidad_zona.setGeometry(buffer)
                entidad_zona.setAttributes([self.qtw_tabla.item(fila,0).text(),self.qtw_tabla.item(fila,2).text()])
                provider2.addFeature(entidad_zona)
                vlayer2.updateExtents()
                vlayer2.setCrs(capa6.crs())
                QgsProject.instance().addMapLayer(vlayer2)
                
                #Buscar edificios dentro del radio.
                capa5_2 = capas5[0]
                
                processing.run("native:selectbylocation", {'INPUT':capa5_2,'PREDICATE':[6],'INTERSECT':vlayer2,'METHOD':0})
                
                puntos_en_buffer = capa5_2.selectedFeatures() 
                campos = capa5_2.fields() 
                nombre_capa_nueva='Edificios dentro del radio '+str(radio)+' de:  '+str(edificio)
                capa_seleccionados = QgsVectorLayer('Point?crs=EPSG:25830', nombre_capa_nueva, 'memory') 
                capa_seleccionados.startEditing()
                dp = capa_seleccionados.dataProvider() 
                dp.addAttributes(campos) 
                capa_seleccionados.updateFields()
                dp.addFeatures(puntos_en_buffer) 
                capa_seleccionados.addAttribute(QgsField("Cumple", QVariant.String))
                capa_seleccionados.updateFields()
                capa_seleccionados.commitChanges() 
                capa_seleccionados.updateExtents()
                capa_seleccionados.setCrs(capa5_2.crs())
                QgsProject.instance().addMapLayer(capa_seleccionados)
                
                # comboBox 3
                seleccionado_2 = self.cmb_Capa3.currentIndex()
                seleccioncapa2 = layer_list[seleccionado_2]
                capas7 = QgsProject.instance().mapLayersByName(seleccioncapa2)
                capa7 = capas7[0]
                if capa7 != None:
                    capas_nueva = QgsProject.instance().mapLayersByName(nombre_capa_nueva)
                    capa_nueva=capas_nueva[0]
                    if capa_nueva!=None:
                        registros_nuevos = capa_nueva.getFeatures()
                        
                        for registro_nuevo in registros_nuevos:
                            capa7.selectByExpression("\"OBJECTID\"=" + str(registro_nuevo["OBJECTID"]))
                            capa_nueva.startEditing()
                            if capa7.selectedFeatureCount() > 0:
                                registro_nuevo["Cumple"]="1"
                            else:
                                registro_nuevo["Cumple"]="0"
                            capa_nueva.updateFeature( registro_nuevo )
                            capa_nueva.updateFields()
                            capa_nueva.commitChanges()